let mapleader = ","
"let mapleader="\<SPACE>"
"
set exrc "Allows for LOCAL vimrc

":h CTRL-W    ":get help on this key combo
":map <C-x>o  ":find the action or map of this key combo

" configure expanding of tabs for various file types
au BufRead,BufNewFile *.scala   set noexpandtab
au BufRead,BufNewFile *.py      set expandtab
au BufRead,BufNewFile *.c       set noexpandtab
au BufRead,BufNewFile *.h       set noexpandtab
au BufRead,BufNewFile Makefile* set noexpandtab

"" -----------------------------------------------------------------------
"  https://www.youtube.com/watch?v=XA2WjJbmmoM
"syntax enable

" Finding files: " tab-completion for all file-related tasks 
" ** is subdir of subdir deep & += appends existing
set path+=**
" Display all matching files when we tab complete
set wildmenu

" TAG JUMPING Create the 'tags`____________________________________________
" Also look at https://linuxhint.com/vim_ctags/
" http://www.held.org.il/blog/2011/02/configuring-ctags-for-python-and-vim/
command! MakeTags !ctags -R .
set tags=./tags,tags;$HOME
set tags+=$HOME/Prj/tags
"
"map <C-[> <C-T>  " **** starts up in REPLACE MODE ******
" - ^] to jump to tag under cursor
" - g^] for ambguous tags
" - Ctrl-[ is easier: was ^t jump back to the tag stack 

" setup for tagbar
nmap <F8> :TagbarToggle<CR>

"__Kite:___________________________________________________________________
let g:kite_auto_complete=1
set statusline=%<%f\ %h%m%r%{kite#statusline()}%=%-14.(%l,%c%V%)\ %P
set laststatus=2

let g:kite_tab_complete=1
" Unnecessary as capital K works for me
" nmap <silent> <buffer> gK <Plug>(kite-docs) 
let g:kite_supported_languages = ['python', 'go']

"set completeopt+=preview
"To have the preview window automatically closed once a completion has been inserted:
"autocmd CompleteDone * if !pumvisible() | pclose | endif
set belloff+=ctrlg  " if vim beeps during completion

" -----------------------------------------------------------------------
" Syntax and indent
" -----------------------------------------------------------------------
syntax on   		" syntax highlighting turn it on
scriptencoding utf8
set encoding=utf-8
set showmatch "Show matching bracets when text indicator is over them
let g:loaded_matchparen=1
set hls       " highlight search
set lbr       " linebreak
set expandtab       " enter spaces when tab is pressed
set softtabstop=4   " Use 2 space instead of tab during format
set shiftwidth=4    " number of spaces to use for auto indent
"set textwidth=120   " break lines when line length increases
set tabstop=4       " use 4 spaces to represent tab
set autoindent      " Copy indent from the row above
set si              " Smart indent
set mouse-=a         " Enable the use of the mouse.
set nocompatible    "Not vi compativle (Vim is king)
set guicursor=      " to prevent funny characters !!!!!!!##########
" -----------------------------------------------------------------------
" make backspaces more powerfull
" -----------------------------------------------------------------------
set backspace=indent,eol,start  " make backspaces more powerful
set ruler                       " show line and column number
set number                      " show line and column number
set showcmd 		                " show (partial) command in status line
"__Colors_______________________________________________________________
"set background=dark
":color solarized
"set guifont=Monaco:h10
"set guifont=Monospace:h20
"_______________________________________________________________________
"--- for YCM compil YCMd by install.py in Plugin Directory ---!!!

let g:syntastic_python_checkers = ['flake8']

"___ keyMaps for copy __________________________________________________
"apt install xclip
vmap "+y :!xclip -sel c 
map "+p :r!xclip -o -sel c
vnoremap <C-c> "+y
set clipboard=unnamed " For mac yy <D-p> did not work for neovim
vmap <leader>yy :!pbcopy -sel c
":!unnamed -sel c 
"___ keyMaps for vim-repl_______________________________________________
nnoremap <leader>r : REPLToggle<Cr>
" ipdb to debug python script
autocmd Filetype python nnoremap <F12> <Esc>:REPLDebugStopAtCurrentLine<Cr>
autocmd Filetype python nnoremap <F10> <Esc>:REPLPDBN<Cr>
autocmd Filetype python nnoremap <F11> <Esc>:REPLPDBS<Cr>

let g:repl_unhide_when_send_lines = 1
let g:repl_position = 0 " 0 bot 3 right
let g:sendtorepl_invoke_key = "<localleader>\\"
let g:repl_cursor_down = 1
let g:repl_python_automerge = 1
let g:repl_ipython_version  = '7'
" 0:Bottom,1:TOP  2:LEFT  3:RIGHT - where repl appears
let g:repl_stayatrepl_when_open = 0

let g:repl_program = { 
            \ 'python': ['python'],
            \ 'default': ['bash'],
            \ 'lua': ['lua'],
            \ 'vim': ['vim -e']
            \ }


"___ keymaps ___________________________________________________________
"(:h ctrl-w_w) lists both mappings as being equivalent.
noremap <c-`> <c-w>w
inoremap <c-`> <c-o><c-w>w
tnoremap <c-`> <c-\><c-n><c-w><c-w>
noremap <c-x>o <c-w>w
inoremap <c-x>o <c-o><c-w>w
tnoremap <c-x>o <C-w>w
"tnoremap <c-x>o <c-\><c-n><c-w><c-w>
"_______________________________________________________________________
" enable folding
set foldmethod=indent
set foldlevel=99
nnoremap <leader>fc za
let g:simpylfold_docstring_preview=1
"_______________________________________________________________________

let nerdtreeignore=['\.pyc$', '\~$'] "ignore files in nerdtree
"map <c-w>t :NERDTreeToggle<cr>
map <c-\> :NERDTreeToggle<cr>

au bufnewfile,bufread *.py
    \ set tabstop=4 |
    \ set softtabstop=4 |
    \ set shiftwidth=4 |
    \ set textwidth=79 |
    \ set expandtab |
    \ set autoindent |
    \ set fileformat=unix

au bufnewfile,bufread *.js, *.html, *.css, *.scala, *.jl
    \ set tabstop=2 |
    \ set softtabstop=2 |
    \ set shiftwidth=2
"_______________________________________________________________________
let $browser = '/usr/bin/google-chrome-stable %s'
"_______________________________________________________________________
" to find files & so on but use https://github.com/shougo/denite.nvim instead???
"plug 'kien/ctrlp.vim'
"plug 'powerline/powerline', {'rtp': 'powerline/bindings/vim/'}
"let g:powerline_pycmd="py3"
"___________________________________________________________
filetype on
filetype plugin indent on
au vimenter,bufread,bufnewfile *.jl set filetype=julia
au vimenter,bufread,bufnewfile *.scala set filetype=scala
au vimenter,bufread,bufnewfile *.py set filetype=python
"au bufread,bufnewfile *.py,*.pyw,*.c,*.h match badwhitespace /\s\+$/

"___Window Cmds________________________________________________________
""<C-w>n - :new horizontal split (editing a new empty buffer)
""<C-w>s - :split window horizontally (editing current buffer)
""<C-w>v - :vsplit window vertically (editing current buffer)
""C-w>c - :close window
""<C-w>o - close all windows, leaving :only the current window open
""<C-w>w - go to next window
""<C-w>p - go to previous window
""<C-w><Arrow> - go to window Arrow Direction

let g:airline#extensions#tabline#enabled = 2
let g:airline#extensions#tabline#fnamemod = ':t'
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = '|'
let g:airline#extensions#tabline#right_sep = ' '
let g:airline#extensions#tabline#right_alt_sep = '|'
let g:airline_left_sep = ' '
let g:airline_left_alt_sep = '|'
let g:airline_right_sep = ' '
let g:airline_right_alt_sep = '|'
"let g:airline_theme= 'term'
"___________________________________________________________
let g:pymode_lint_write = 0       " turn off running pylint on file save
nnoremap <leader>p :PyLint<cr>   " pressing <leader>p will run plyint on current buffer
"___________________________________________________________
"" to change default keybinding for nvim-ipy
"let g:nvim_ipy_perform_mappings = 0
map <silent> <NL> <Plug>(IPy-Run)
map <leader>ip :IPython --existing

"___________________________________________________________
let g:vim_pbcopy_remote_cmd = "nc localhost 8377"

if has("win64")
  set termencoding=utf8
  nnoremap <silent> <leader>te :e ~/AppData/Local/.vimrc<CR>
elseif has("unix")
  nnoremap <silent> <leader>te :e $HOME/.vimrc<CR>
  let g:python3_host_grog = '/usr/bin/python3'
  "nnoremapi <silent> <leader>te :e $XDG_CONFIG_HOME/nvim/init.vim<CR>
endif

"___________________________________________________________
"dump selected lines
function! DumpLines() range
  echo system('sed -n '.a:firstline.','.a:lastline.'p '.expand('%'))
  "call IronSend(echo 'sed -n '.a:firstline.','.a:lastline.'p '.expand('%'))
endfunction
